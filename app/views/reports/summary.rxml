xml.instruct! :xml, :version=>"1.0", :encoding=>"UTF-8" 
xml.Workbook({
    'xmlns'      => "urn:schemas-microsoft-com:office:spreadsheet",
    'xmlns:o'    => "urn:schemas-microsoft-com:office:office",
    'xmlns:x'    => "urn:schemas-microsoft-com:office:excel",
    'xmlns:html' => "http:// www.w3.org/TR/REC-html40",
    'xmlns:ss'   => "urn:schemas-microsoft-com:office:spreadsheet"
  }) do

  xml.Styles do
    xml.Style 'ss:ID' => 'Default', 'ss:Name' => 'Normal' do
      xml.Alignment 'ss:Vertical' => 'Bottom'
      xml.Borders
      xml.Font 'ss:FontName' => 'Verdana'
      xml.Interior
      xml.NumberFormat
      xml.Protection
    end
    xml.Style 'ss:ID' => 's22' do
      xml.NumberFormat 'ss:Format' => 'General Date'
    end
  end
  xml.Worksheet 'ss:Name' => 'service'+@start_period.number do
    xml.Table do
      xml.Row do
        xml.Cell do
          xml.Data "summary", 'ss:Type' => 'String'
        end
      end
      xml.Row do
        xml.Cell do
          xml.Data "GMU", 'ss:Type' => 'String'
        end
         
        xml.Cell do
          xml.Data "Job code", 'ss:Type' => 'String'
        end
          
        xml.Cell do
          xml.Data "Client(Eng)", 'ss:Type' => 'String'
        end
          
        xml.Cell do
          xml.Data "Job Ref", 'ss:Type' => 'String'
        end
          
        xml.Cell do
          xml.Data "Job Ptr", 'ss:Type' => 'String'
        end
          
        xml.Cell do
          xml.Data "Job Mgr", 'ss:Type' => 'String'
        end
          
        xml.Cell do
          xml.Data "contract_number", 'ss:Type' => 'String'
        end

        xml.Cell do
          xml.Data "budgeted_service_fee", 'ss:Type' => 'String'
        end

        xml.Cell do
          xml.Data "budgeted_expense_fee", 'ss:Type' => 'String'
        end

        xml.Cell do
          xml.Data "service_PFA%", 'ss:Type' => 'String'
        end

        xml.Cell do
          xml.Data "expense_PFA%", 'ss:Type' => 'String'
        end

        xml.Cell do
          xml.Data "estimated_commision", 'ss:Type' => 'String'
        end

        xml.Cell do
          xml.Data "estimated_outsorcing", 'ss:Type' => 'String'
        end
          
        xml.Cell do
          xml.Data "contracted_service_fee", 'ss:Type' => 'String'
        end

        xml.Cell do
          xml.Data "contracted_expense_fee", 'ss:Type' => 'String'
        end
           
        xml.Cell do
          xml.Data "created_on", 'ss:Type' => 'String'
        end
           xml.Cell do
          xml.Data "prj start", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "prj end", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Service Line", 'ss:Type' => 'String'
        end
          
        xml.Cell do
          xml.Data "Project status", 'ss:Type' => 'String'
        end
        ######fee#######
        xml.Cell do
          xml.Data "Fee Beg", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Fee Cum", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Fee Sub", 'ss:Type' => 'String'
        end
        ######PFA#######
        xml.Cell do
          xml.Data "PFA rate", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "PFA Beg", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "PFA Cum", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "PFA Sub", 'ss:Type' => 'String'
        end
       
        ######commission and outsourcing#######
        xml.Cell do
          xml.Data "commission+outsourcing Beg", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "commission", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "outsourcing", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Sub", 'ss:Type' => 'String'
        end
        ###########billing############
        xml.Cell do
          xml.Data "Billing Beg", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Billing Cum", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "BT", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data " Billing Sub", 'ss:Type' => 'String'
        end
        # UFA
        xml.Cell do
          xml.Data "UFA Beg", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "UFA Cum", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data " UFA Sub", 'ss:Type' => 'String'
        end
      end
      # Rows
      for record in @projects

        xml.Row do
          xml.Cell do
            xml.Data record.GMU.title, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.job_code, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.client.english_name, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.referring.english_name, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.partner.english_name, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.manager.english_name, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.contract_number, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.budgeted_service_fee, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.budgeted_expense, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.service_PFA, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.expense_PFA, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.estimated_commision, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.estimated_outsorcing, 'ss:Type' => 'String'
          end          
          xml.Cell do
            xml.Data record.contracted_service_fee, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.contracted_expense, 'ss:Type' => 'String'
          end           
          xml.Cell do
            xml.Data record.created_on, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.starting_date, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.ending_date, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.service_code.code, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.status.title, 'ss:Type' => 'String'
          end
          @show=0
          # fee
          for fee in @service_pfa
            if record.id.to_s == fee.prj_id.to_s
              xml.Cell do
                xml.Data fee.Beg_service_fee, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data fee.Service_fee, 'ss:Type' => 'Number'
              end
              xml.Cell do
                #sub
              end
              xml.Cell do
                xml.Data record.service_PFA, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data fee.Beg_PFA, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data fee.PFA, 'ss:Type' => 'Number'
              end
              xml.Cell do
                @show=1
              end
            end
          end
          if @show == 0
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
          else @show =0
          end
          # commission and outsourcing
          for co_fee in @co_fees
            if record.id.to_s == co_fee.prj_id.to_s
              xml.Cell do
                xml.Data co_fee.CO_Beg, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data co_fee.commission, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data co_fee.outsourcing, 'ss:Type' => 'Number'
              end
              xml.Cell do
                @show=1
              end
            end
          end
          if @show == 0
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end

          else @show =0
          end
            
          #billing
          for billing in @billings
            if record.id.to_s == billing.prj_id.to_s
              xml.Cell do
                xml.Data billing.Beg_service, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data billing.Service_billing, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data billing.BT, 'ss:Type' => 'Number'
              end
              xml.Cell do
                @show=1
              end
            end
          end
          if @show == 0
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end

          else @show =0
          end
            
          #########UFA#############
          for ufa in @ufas
            if record.id.to_s == ufa.prj_id.to_s
              xml.Cell do
                xml.Data ufa.Beg_service, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data ufa.Service_UFA, 'ss:Type' => 'Number'
              end
              
              xml.Cell do
                @show=1
              end
            end
          end
          if @show == 0
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end

          else @show =0
          end
                                  
        end
      end           
    end
  end
  
  xml.Worksheet 'ss:Name' => 'expense'+@start_period.number do
    xml.Table do

      # Header
      #xml.Row do
      #  for column in Personalcharge.content_columns do
      #    xml.Cell do
      #      xml.Data column.human_name, 'ss:Type' => 'String'
      #    end
      #  end
      #end
      xml.Row do
        xml.Cell do
          xml.Data "summary", 'ss:Type' => 'String'
        end
      end
      xml.Row do
        xml.Cell do
          xml.Data "GMU", 'ss:Type' => 'String'
        end
         
        xml.Cell do
          xml.Data "Job code", 'ss:Type' => 'String'
        end
          
        xml.Cell do
          xml.Data "Client(Eng)", 'ss:Type' => 'String'
        end
          
        xml.Cell do
          xml.Data "Job Ref", 'ss:Type' => 'String'
        end
          
        xml.Cell do
          xml.Data "Job Ptr", 'ss:Type' => 'String'
        end
          
        xml.Cell do
          xml.Data "Job Mgr", 'ss:Type' => 'String'
        end
          
        xml.Cell do
          xml.Data "Service Line", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Project status", 'ss:Type' => 'String'
        end
        ###############travel####################
        xml.Cell do
          xml.Data "Travel Beg", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Travel Cum", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Travel Sub", 'ss:Type' => 'String'
        end
                    
        ##################meal###################
        xml.Cell do
          xml.Data "Meal Beg", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Meal Cum", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Meal Sub", 'ss:Type' => 'String'
        end

        ##################Per dium###################
        xml.Cell do
          xml.Data "Per dium Beg", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Per dium Cum", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Per dium Sub", 'ss:Type' => 'String'
        end
          
        ##################expense###########################
        xml.Cell do
          xml.Data "Expense Beg", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Ticket", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Courrier", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Stationery", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Postage", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Report binding", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Payment on be half", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "BT", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data " Expense Sub", 'ss:Type' => 'String'
        end
        ##############PFA##############3
        xml.Cell do
          xml.Data "PFA Beg", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "PFA rate", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data " PFA Sub", 'ss:Type' => 'String'
        end
          
        ###########billing############
        xml.Cell do
          xml.Data "Billing Beg", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "Billing Cum", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "BT", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data " Billing Sub", 'ss:Type' => 'String'
        end
          
        # UFA
        xml.Cell do
          xml.Data "UFA Beg", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data "UFA Cum", 'ss:Type' => 'String'
        end
        xml.Cell do
          xml.Data " UFA Sub", 'ss:Type' => 'String'
        end
      end      
      #

      # Rows
      for record in @projects

        xml.Row do
          xml.Cell do
            xml.Data record.GMU.title, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.job_code, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.client.english_name, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.referring.english_name, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.partner.english_name, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.manager.english_name, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.service_code.code, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.status.title, 'ss:Type' => 'String'
          end
          @show =0

          for reimb in @reimbs
            if record.id.to_s == reimb.prj_id.to_s
                    
              #############travel#######################
              xml.Cell do
                xml.Data reimb.Beg_travel, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data reimb.cum_travel, 'ss:Type' => 'Number'
              end
              xml.Cell do
                @show=1
              end
                    
              ###################meal#######################
              xml.Cell do
                xml.Data reimb.Beg_meal, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data reimb.cum_meal, 'ss:Type' => 'Number'
              end
              xml.Cell do
                @show=1
              end
              ###################Per duim#######################
              xml.Cell do
                xml.Data reimb.Beg_per_dium, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data reimb.cum_per_dium, 'ss:Type' => 'Number'
              end
              xml.Cell do
                @show=1
              end
            end
          end
          if @show == 0
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
          else @show =0
          end
            
          #####################expense##############################
          for expense in @expenses
            if record.id.to_s == expense.prj_id.to_s
              xml.Cell do
                xml.Data expense.Beg_expense, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data expense.Ticket, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data expense.Courrier, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data expense.Stationery, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data expense.Postage, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data expense.Report_binding, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data expense.Payment_on_be_half, 'ss:Type' => 'Number'
              end
              xml.Cell do
                #BT
              end
              xml.Cell do
                @show=1
              end
            end
          end
          if @show == 0
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
          else @show =0
          end

          ###########PFA############
          xml.Cell do
            unless record.deduction.nil?
              xml.Data record.deduction.expense_PFA, 'ss:Type' => 'Number'
            else
              xml.date "0", 'ss:Type' => 'Number'
            end
          end
          xml.Cell do
            xml.Data record.expense_PFA, 'ss:Type' => 'Number'
          end
          xml.Cell do
            xml.Data "PFA", 'ss:Type' => 'String'
          end
                    
                           
          #########billing#############
          for billing in @billings
            if record.id.to_s == billing.prj_id.to_s
              xml.Cell do
                xml.Data billing.Beg_expense, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data billing.Expense_billing, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data billing.BT, 'ss:Type' => 'Number'
              end
              xml.Cell do
                @show=1
              end
            end
          end
          if @show == 0
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end


          else @show =0
          end

          #########UFA#############
          for ufa in @ufas
            if record.id.to_s == ufa.prj_id.to_s
              xml.Cell do
                xml.Data ufa.Beg_expense, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data ufa.Expense_UFA, 'ss:Type' => 'Number'
              end
              
               xml.Cell do
                @show=1
              end
            end
          end
          if @show == 0
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end


          else @show =0
          end
                        
        end # row

      end
      ###################total ########################
      xml.Row do
        xml.Cell do
          xml.Data "Total", 'ss:Type' => 'String'
        end
      end
      xml.Row do
        #  for column in Personalcharge.content_columns do
        xml.Cell do
          xml.Data "Client name", 'ss:Type' => 'String'
        end
          
        xml.Cell do
          xml.Data "Job code", 'ss:Type' => 'String'
        end
       
                                                                                      
        #  end
      end      
      #

      # Rows
      xml.Row do
        #    for column in Personalcharge.content_columns do
        xml.Cell do
              
        end
        xml.Cell do
              
        end
        xml.Cell do
            
        end
          
        xml.Cell do

        end

      end
      
    end
  end

end